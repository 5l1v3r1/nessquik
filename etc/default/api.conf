;
; nessquik API
;
; This defines the nessquik API.
;
; If you want to extend the API, you need to write classes
; and methods. The classes should go in lib/.
;
; After the class is written, include it using the conventions
; shown below. Note that all public methods in the class will
; be exported to the API.
;
; By default, the API denies access to all methods. To enable
; access to the API by applications or hosts, use the roles system.
;
; Class names and methods are case sensitive
;
; ex.
;
; The following example shows how to define an available class
; and specify a namespace to associate with it.
;
;	classes.myclass.class = "Myclass"
;
; In the above, the following parts are shown
;
;	myclass		This is a subkey that defines a specific
;			namespace in the API. This value should
;			be unique in regard to the other namespaces.
;			By specifying the namespace like this,
;			you are given the power of overriding
;			the default namespaces
;
;	"Myclass"	This is the name of the class located
;			in the lib/ directory. This class name
;			MUST follow the naming conventions established
;			by nessquik API. Namely, that a class name should
;			include underscores to specify subdirectories,
;			from lib/, that the class is located in.
;
;			For example,
;
;				My_Class_Is_Cool
;
;			should be defined as
;
;				class My_Class_Is_Cool
;
;			in the file
;
;				lib/My/Class/Is/Cool.php
;
;

[production]
classes.account.class = "Api_Account"
classes.audit.class = "Api_Audit"
classes.authorize.class = "Api_Authorize"
classes.maintenance.class = "Api_Maintenance"
classes.permission.class = "Api_Permissions"
classes.policy.class = "Api_Policy"
classes.role.class = "Api_Role"
classes.scanner.class = "Api_Scanner"
classes.test.class = "Api_Test"
classes.utility.class = "Api_Utility"
